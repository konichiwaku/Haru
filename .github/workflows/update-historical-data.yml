import os
import requests
import pandas as pd
import boto3
import json # Import json for saving JSON files

# --- Konfigurasi KuCoin (gunakan environment variables) ---
KUCOIN_API_KEY = os.getenv('KUCOIN_API_KEY')
# KUCOIN_API_SECRET = os.getenv('KUCOIN_API_SECRET') # Uncomment if needed
# KUCOIN_API_PASSPHRASE = os.getenv('KUCOIN_API_PASSPHRASE') # Uncomment if needed

# --- Konfigurasi Cloudflare R2 (gunakan environment variables) ---
R2_ACCESS_KEY_ID = os.getenv('R2_ACCESS_KEY_ID')
R2_SECRET_ACCESS_KEY = os.getenv('R2_SECRET_ACCESS_KEY')
R2_ACCOUNT_ID = os.getenv('R2_ACCOUNT_ID')
R2_BUCKET_NAME = 'my-chart-data' # Ganti dengan nama bucket R2 Anda

# --- Konfigurasi Umum ---
BASE_URL = "https://api.kucoin.com"
SYMBOLS = ["SOL-USDT", "BTC-USDT", "ETH-USDT"] # Contoh untuk 200+ koin, Anda perlu daftar lengkapnya
KLINE_INTERVAL = "12hour"
DAYS_TO_ANALYZE = 7 # Misal, 7 hari data

def fetch_kline_data(symbol, interval, start_time=None, end_time=None):
    endpoint = f"/api/v1/market/candles"
    params = {
        "symbol": symbol,
        "type": interval,
        "startAt": start_time,
        "endAt": end_time
    }
    headers = {
        "KC-API-KEY": KUCOIN_API_KEY,
        # "KC-API-SECRET": KUCOIN_API_SECRET, # Uncomment if needed
        # "KC-API-PASSPHRASE": KUCOIN_API_PASSPHRASE # Uncomment if needed
    }
    response = requests.get(BASE_URL + endpoint, params=params, headers=headers)
    response.raise_for_status() # Akan melempar error untuk status HTTP buruk
    data = response.json().get("data", [])
    
    df = pd.DataFrame(data, columns=[
        "time", "open", "close", "high", "low", "volume", "amount"
    ])
    df["time"] = pd.to_datetime(df["time"], unit="s")
    df = df.astype({"open": float, "close": float, "high": float, "low": float, "volume": float, "amount": float})
    return df

def upload_to_r2(file_content, file_name, content_type):
    # Endpoint URL untuk R2 (ganti R2_ACCOUNT_ID dengan ID akun Cloudflare Anda)
    r2_endpoint_url = f'https://{R2_ACCOUNT_ID}.r2.cloudflarestorage.com'

    s3 = boto3.client(
        's3',
        endpoint_url=r2_endpoint_url,
        aws_access_key_id=R2_ACCESS_KEY_ID,
        aws_secret_access_key=R2_SECRET_ACCESS_KEY,
        region_name='auto' # Atau 'us-east-1' juga bisa
    )
    
    try:
        s3.put_object(
            Bucket=R2_BUCKET_NAME,
            Key=file_name,
            Body=file_content,
            ContentType=content_type
        )
        print(f"File {file_name} berhasil diunggah ke R2.")
    except Exception as e:
        print(f"Gagal mengunggah {file_name} ke R2: {e}")

if __name__ == "__main__":
    for symbol in SYMBOLS:
        print(f"Memproses {symbol}...")
        try:
            df = fetch_kline_data(symbol, KLINE_INTERVAL)
            if not df.empty:
                # Simpan sebagai JSON
                json_filename = f"{symbol.replace('-', '_').lower()}_latest.json"
                json_content = df.to_json(orient="records", date_format="iso", indent=4)
                upload_to_r2(json_content, json_filename, 'application/json')

                # Simpan sebagai HTML
                html_filename = f"{symbol.replace('-', '_').lower()}_latest.html"
                html_content = df.to_html(index=False)
                upload_to_r2(html_content, html_filename, 'text/html')
            else:
                print(f"Tidak ada data ditemukan untuk {symbol}")

        except requests.exceptions.RequestException as e:
            print(f"Error fetching data for {symbol}: {e}")
        except Exception as e:
            print(f"Terjadi kesalahan saat memproses {symbol}: {e}")

        # Sangat penting: Tambahkan jeda untuk menghindari rate limit API KuCoin
        import time
        time.sleep(1) # Jeda 1 detik antar setiap panggilan API. Sesuaikan jika perlu.
