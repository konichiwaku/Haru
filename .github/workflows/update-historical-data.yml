name: 1. Update Data Historis Koin (ATH/ATL)

on:
  schedule:
    # Jalankan setiap 24 jam sekali (pukul 00:00 UTC)
    - cron: '0 0 * * *'
  workflow_dispatch: # Memungkinkan Anda menjalankan workflow secara manual dari GitHub UI

jobs:
  fetch-historical:
    runs-on: ubuntu-latest
    timeout-minutes: 360 # Timeout maksimal 6 jam (6 jam = 360 menit)

    steps:
      - name: Checkout kode
        uses: actions/checkout@v4

      - name: Siapkan Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instal dependensi
        run: |
          npm install axios

      - name: Ambil dan Proses Data Historis
        env: # Menambahkan API Key ke environment variabel
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
        run: |
          # Tulis kode JavaScript ke sebuah file sementara
          cat << 'EOF' > process_data.js
          const axios = require('axios');
          const fs = require('fs');
          const path = require('path');

          const COIN_IDS_FILE = 'duit.json'; // Pastikan nama file adalah 'duit.json'
          const OUTPUT_FILE = 'historical_summary.json';
          const COINGECKO_API_KEY = process.env.COINGECKO_API_KEY; // Ambil API Key dari environment variable

          async function fetchAndProcessHistoricalData() {
            try {
              console.log('Membaca ID koin dari:', COIN_IDS_FILE);
              const coinIds = JSON.parse(fs.readFileSync(COIN_IDS_FILE, 'utf8'));
              console.log('Ditemukan', coinIds.length, 'koin untuk diproses.');

              const historicalSummaries = {};

              for (const coinId of coinIds) {
                console.log('Mengambil data historis untuk:', coinId);
                try {
                  // MENGUBAH CARA PENGIRIMAN API KEY MENJADI VIA HEADER
                  const response = await axios.get(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=usd&days=max`, {
                      headers: {
                          'x-cg-demo-api-key': COINGECKO_API_KEY // API Key dikirim di header
                      }
                  });
                  const prices = response.data.prices;

                  let ath = 0;
                  let athDate = '';
                  let atl = Number.MAX_VALUE;
                  let atlDate = '';

                  if (prices && prices.length > 0) {
                    prices.forEach(([timestamp, price]) => {
                      if (price > ath) {
                        ath = price;
                        athDate = new Date(timestamp).toLocaleDateString('id-ID', { year: 'numeric', month: 'long', day: 'numeric' });
                      }
                      if (price < atl) {
                        atl = price;
                        atlDate = new Date(timestamp).toLocaleDateString('id-ID', { year: 'numeric', month: 'long', day: 'numeric' });
                      }
                    });
                  } else {
                    console.warn('Tidak ada data harga ditemukan untuk', coinId);
                  }

                  historicalSummaries[coinId] = {
                    ath: ath,
                    ath_date: athDate,
                    atl: atl,
                    atl_date: atlDate
                  };

                  await new Promise(resolve => setTimeout(resolve, 6000)); // Jeda 2 detik (lebih aman dari rate limit)

                } catch (error) {
                  console.error(`Error saat mengambil data untuk ${coinId}:`, error.message);
                  // Jangan keluar dari loop, lanjutkan ke koin berikutnya meskipun ada error
                }
              }

              fs.writeFileSync(OUTPUT_FILE, JSON.stringify(historicalSummaries, null, 2));
              console.log('Ringkasan historis disimpan ke', OUTPUT_FILE);

            } catch (error) {
              console.error('Terjadi error fatal:', error.message);
              process.exit(1);
            }
          }

          fetchAndProcessHistoricalData();
          EOF
          # Jalankan file JavaScript dengan Node.js
          node process_data.js

      - name: Siapkan file untuk diunggah
        run: |
          mkdir -p upload_data # Buat folder sementara
          mv historical_summary.json upload_data/ # Pindahkan file ke folder sementara

      - name: Unggah historical_summary.json ke Cloudflare R2
        uses: ryand56/r2-upload-action@v1 # Menggunakan versi v1
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET_NAME }}
          source-dir: upload_data # Sekarang upload hanya dari folder ini
          destination-dir: /
          output-file-url: true
