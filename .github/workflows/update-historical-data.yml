name: 1. Update Data Historis Koin (ATH/ATL)

on:
  schedule:
    # Jalankan setiap 24 jam sekali (pukul 00:00 UTC)
    - cron: '0 0 * * *'
  workflow_dispatch: # Memungkinkan Anda menjalankan workflow secara manual dari GitHub UI

jobs:
  fetch-historical:
    runs-on: ubuntu-latest
    timeout-minutes: 360 # Timeout maksimal 6 jam (6 jam = 360 menit)

    steps:
      - name: Checkout kode
        uses: actions/checkout@v4

      - name: Siapkan Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instal dependensi
        run: |
          npm install axios crypto # Menambahkan 'crypto' untuk Hashing/Signing

      - name: Ambil dan Proses Data Historis dari Binance
        env: # Menggunakan BINANCE API Key dan Secret
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
          BINANCE_SECRET_KEY: ${{ secrets.BINANCE_SECRET_KEY }}
        run: |
          # Tulis kode JavaScript ke sebuah file sementara
          cat << 'EOF' > process_data.js
          const axios = require('axios');
          const fs = require('fs');
          const path = require('path');
          const crypto = require('crypto'); // Impor modul crypto

          const COIN_SYMBOLS_FILE = 'duit.json'; // Sekarang ini adalah file simbol koin
          const OUTPUT_FILE = 'historical_summary.json';
          const BINANCE_API_KEY = process.env.BINANCE_API_KEY;
          const BINANCE_SECRET_KEY = process.env.BINANCE_SECRET_KEY; // Secret Key diperlukan untuk signed endpoints, tapi untuk klines public mungkin tidak selalu

          async function fetchAndProcessHistoricalData() {
            try {
              console.log('Membaca simbol koin dari:', COIN_SYMBOLS_FILE);
              // Pastikan duit.json Anda berisi simbol perdagangan Binance (misal BTCUSDT, ETHUSDT)
              // Contoh: ["BTCUSDT", "ETHUSDT", "XRPUSDT", "DOGEUSDT"]
              const coinSymbols = JSON.parse(fs.readFileSync(COIN_SYMBOLS_FILE, 'utf8'));
              console.log('Ditemukan', coinSymbols.length, 'simbol koin untuk diproses.');

              const historicalSummaries = {};

              for (const symbol of coinSymbols) {
                console.log('Mengambil data historis untuk:', symbol);
                try {
                  // Binance API endpoint untuk data klines (candlestick data)
                  // interval=1d untuk data harian, limit=1000 untuk 1000 titik data (sekitar 2.7 tahun)
                  // 'limit=1000' adalah maksimum per request untuk public klines.
                  // Untuk data lebih lama, perlu looping dengan startTime/endTime
                  const BINANCE_API_URL = `https://api.binance.com/api/v3/klines`;
                  const params = {
                      symbol: symbol,
                      interval: '1d', // Interval harian
                      limit: 1000 // Jumlah data point
                  };

                  // Public endpoints (seperti klines) biasanya tidak memerlukan signature,
                  // tapi API key tetap disarankan di header untuk rate limiting yang lebih tinggi.
                  const response = await axios.get(BINANCE_API_URL, {
                      params: params,
                      headers: {
                          'X-MBX-APIKEY': BINANCE_API_KEY // API Key untuk identifikasi dan rate limit
                      }
                  });

                  const klines = response.data;

                  let ath = 0;
                  let athDate = '';
                  let atl = Number.MAX_VALUE;
                  let atlDate = '';

                  if (klines && klines.length > 0) {
                    klines.forEach(kline => {
                      const [
                        openTime,
                        openPrice,
                        highPrice, // Ini adalah harga tertinggi dalam interval
                        lowPrice,  // Ini adalah harga terendah dalam interval
                        closePrice,
                        volume,
                        closeTime,
                        quoteAssetVolume,
                        numberOfTrades,
                        takerBuyBaseAssetVolume,
                        takerBuyQuoteAssetVolume,
                        ignore
                      ] = kline.map(Number); // Pastikan dikonversi ke Number

                      if (highPrice > ath) {
                        ath = highPrice;
                        athDate = new Date(openTime).toLocaleDateString('id-ID', { year: 'numeric', month: 'long', day: 'numeric' });
                      }
                      if (lowPrice < atl) {
                        atl = lowPrice;
                        atlDate = new Date(openTime).toLocaleDateString('id-ID', { year: 'numeric', month: 'long', day: 'numeric' });
                      }
                    });
                  } else {
                    console.warn('Tidak ada data klines ditemukan untuk', symbol);
                  }

                  historicalSummaries[symbol] = {
                    ath: ath,
                    ath_date: athDate,
                    atl: atl,
                    atl_date: atlDate
                  };

                  await new Promise(resolve => setTimeout(resolve, 500)); // Jeda 0.5 detik (Binance rate limit lebih tinggi)

                } catch (error) {
                  console.error(`Error saat mengambil data untuk ${symbol}:`, error.message);
                  if (error.response) {
                      console.error('Status:', error.response.status);
                      console.error('Data:', error.response.data);
                  }
                  // Jangan keluar dari loop, lanjutkan ke koin berikutnya meskipun ada error
                }
              }

              fs.writeFileSync(OUTPUT_FILE, JSON.stringify(historicalSummaries, null, 2));
              console.log('Ringkasan historis disimpan ke', OUTPUT_FILE);

            } catch (error) {
              console.error('Terjadi error fatal:', error.message);
              process.exit(1);
            }
          }

          fetchAndProcessHistoricalData();
          EOF
          # Jalankan file JavaScript dengan Node.js
          node process_data.js

      - name: Siapkan file untuk diunggah
        run: |
          mkdir -p upload_data # Buat folder sementara
          mv historical_summary.json upload_data/ # Pindahkan file ke folder sementara

      - name: Unggah historical_summary.json ke Cloudflare R2
        uses: ryand56/r2-upload-action@v1 # Menggunakan versi v1
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET_NAME }}
          source-dir: upload_data # Sekarang upload hanya dari folder ini
          destination-dir: /
          output-file-url: true
